{
  parserClass="tigase.idea.tdsl.psi.TDSLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TDSL"
  psiImplClassSuffix="Impl"
  psiPackage="tigase.idea.tdsl.psi"
  psiImplPackage="tigase.idea.tdsl.psi.impl"

  elementTypeHolderClass="tigase.idea.tdsl.psi.TDSLTypes"
  elementTypeClass="tigase.idea.tdsl.psi.TDSLElementType"
  tokenTypeClass="tigase.idea.tdsl.psi.TDSLTokenType"

  tokens = [
    propName = "regexp:(\'.+\')|\w+"
    beanName = "regexp:(\'.+\')|\w+"
    string = "regexp:\"[^\"]*\"|'[^']*'"
    number = "regexp:(\+|\-)?\p{Digit}*[dDfFlL]?"
    boolean = "regexp:(true)|(false)"
    LCURLY = "{"
    RCURLY = "}"
    LPAREN = "("
    RPAREN = ")"
    LBRACK = "["
    RBRACK = "]"
    beanCfgPropName = "regexp:(class|active|exportable)"
    beanCfgPropValue = "regexp:[^\ ,\)]+"
    operatorAdd = "+"
    operatorSubstract = "-"
    operatorMultiply = "*"
    operatorDivide = "/"
    envPropFnName = "regexp:(env|prop)"
    comma = ","
    colon = ":"
  ]
}

root ::= (prop|bean|COMMENT)*

//beanName ::= objName
beanCfgPropPair ::= beanCfgPropName colon (boolean|beanCfgPropValue)
beanCfg ::= LPAREN [ beanCfgPropPair (comma beanCfgPropPair)* ] RPAREN
beanContent ::= LCURLY [ (prop|bean|COMMENT)* ] RCURLY
bean ::= beanName [ beanCfg] beanContent

//expression ::= value expressionOperator value
envFunction ::= envPropFnName LPAREN string ("," string)? RPAREN
listValue ::= LBRACK value (comma value)* RBRACK
value ::= (number (operatorAdd|operatorSubstract|operatorMultiply|operatorDivide) number) | ((string|envFunction) operatorAdd (string|envFunction)) | (listValue) | envFunction | string | number | boolean
prop ::= propName ASSIGNMENT value
